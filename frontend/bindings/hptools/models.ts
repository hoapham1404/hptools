// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * ProcessInfo represents information about a running process
 */
export class ProcessInfo {
    "imageName": string;
    "pid": number;
    "sessionName": string;
    "sessionNum": number;
    "memUsageB": number;
    "memUsageStr": string;
    "windowTitle": string;
    "hasWindow": boolean;
    "windowCount": number;

    /** Creates a new ProcessInfo instance. */
    constructor($$source: Partial<ProcessInfo> = {}) {
        if (!("imageName" in $$source)) {
            this["imageName"] = "";
        }
        if (!("pid" in $$source)) {
            this["pid"] = 0;
        }
        if (!("sessionName" in $$source)) {
            this["sessionName"] = "";
        }
        if (!("sessionNum" in $$source)) {
            this["sessionNum"] = 0;
        }
        if (!("memUsageB" in $$source)) {
            this["memUsageB"] = 0;
        }
        if (!("memUsageStr" in $$source)) {
            this["memUsageStr"] = "";
        }
        if (!("windowTitle" in $$source)) {
            this["windowTitle"] = "";
        }
        if (!("hasWindow" in $$source)) {
            this["hasWindow"] = false;
        }
        if (!("windowCount" in $$source)) {
            this["windowCount"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ProcessInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): ProcessInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ProcessInfo($$parsedSource as Partial<ProcessInfo>);
    }
}

/**
 * WindowInfo represents window position and size information
 */
export class WindowInfo {
    "x": number;
    "y": number;
    "width": number;
    "height": number;

    /** Creates a new WindowInfo instance. */
    constructor($$source: Partial<WindowInfo> = {}) {
        if (!("x" in $$source)) {
            this["x"] = 0;
        }
        if (!("y" in $$source)) {
            this["y"] = 0;
        }
        if (!("width" in $$source)) {
            this["width"] = 0;
        }
        if (!("height" in $$source)) {
            this["height"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new WindowInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): WindowInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new WindowInfo($$parsedSource as Partial<WindowInfo>);
    }
}
